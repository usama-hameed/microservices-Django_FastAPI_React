version: '3.8'
services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - 8000:8000
    volumes:
      - .:/app
    restart: always
#    environment:
#      - DB_HOST=db
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
    links:
      - db:db
#    networks:
#      - djangonetwork


  db:
    image: postgres
#    hostname: db
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=main
      - "POSTGRES_HOST_AUTH_METHOD=trust"
    ports:
      - "5432:5432"
    restart: always

  rabbitmq:
    image: rabbitmq:3.8-management-alpine
#    container_name: rabbitmq
#    hostname: rabbitmq
    ports:
      - 15673:15672

    environment:
      RABBITMQ_DEFAULT_VHOST: vhost
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 30s
      retries: 10
    restart: always
#    networks:
#      - djangonetwork
#  queue:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    command: 'python consumer.py'
#    depends_on:
#      - db
#      - rabbitmq
#      - backend
#networks:
#  djangonetwork: